// Copyright (c) 2015 CNRS
// Author: Steve Tonneau
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_RBPRM_CORBA_BUILDER_IDL
# define HPP_RBPRM_CORBA_BUILDER_IDL

# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  module rbprm {
  interface RbprmBuilder
  {
    /// Create a Device for the ROM of the robot
    /// This function can be called several times to include several ROMs (one for each limb)
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param romRobotName the name of the robot range of motion.
    ///  Load robot model
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotRomModel (in string romRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);


    /// Create a RbprmDevice for the root of the robot

    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotCompleteModel (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Create a RbprmFullBody object
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadFullBodyRobot (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

		/// Create a RbprmFullBody object
		/// The device automatically has an anchor joint called "base_joint" as
		/// root joint.
		void loadFullBodyRobotFromExistingRobot ()
			raises (Error);

    /// Set Rom constraints for the configuration shooter
    /// a configuration will only be valid if all roms indicated
    /// are colliding with the environment.
    /// If no roms are indicated, a configuration will be valid if any rom
    /// is colliding with the environment.
    ///
    void setFilter (in Names_t roms)
      raises (Error);

    /// Set Rom surface constraints for the configuration shooter
    /// a Rom configuration will only be valid it collides with a surface
    /// that forms a given affordance (support, lean, etc.)
    /// \param affordances a list of affordances accepted for 
		/// validation of given Rom
		///
    void setAffordanceFilter(in string romName, in Names_t affordances) raises (Error);

    /// Sets limits on robot orientation, described according to Euler's ZYX rotation order
    ///
    /// \param limitszyx 6D vector with the lower and upperBound for each rotation axis in sequence
    /// expressed in gradients
    /// [z_inf, z_sup, y_inf, y_sup, x_inf, x_sup]
    void boundSO3(in floatSeq limitszyx) raises (Error);

		/// Project a state into a COM
		///
		/// \param stateId target state
		/// \param com target com
		double projectStateToCOM(in unsigned short stateId,  in floatSeq com) raises (Error);

		/// Create a state and push it to the state array
		///
		/// \param q configuration
		/// \param names list of effectors in contact
		/// \return stateId
    short createState(in floatSeq configuration, in Names_t contactLimbs, in boolean isInContact, in double time) raises (Error);

    /// Get Sample configuration by its id
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return dofArray Array of degrees of freedom corresponding to the current configuration of the robot
    /// , to which the desired limb configuration has been assigned.
    floatSeq getSampleConfig(in string sampleName, in unsigned short sampleId) raises (Error);


    /// Get the end effector position of a given limb configuration
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return world position of the limb end effector given the current robot configuration and the
    /// and the selected sample
    floatSeq getSamplePosition(in string sampleName, in unsigned short sampleId) raises (Error);

    /// Get the end effector position for a given configuration, assuming z normal
    /// \param limbName name of the limb from which to retrieve a sample
    /// \param dofArray configuration of the robot
    /// \return world position of the limb end effector given the current robot configuration.
    /// array of size 4, where each entry is the position of a corner of the contact surface
    floatSeqSeq getEffectorPosition(in string limbName, in floatSeq dofArray) raises (Error);

    /// Get the end effector position of a given limb configuration
    /// \param limbName name of the limb from which to retrieve a sample
    /// \return number of samples generated for the limb
    unsigned short getNumSamples(in string limbName) raises (Error);

    /// Get the number of octree nodes for a limb database
    /// \param limbName name of the limb from which to retrieve octree number
    /// \return ids of the nodes in the octree
    floatSeq getOctreeNodeIds(in string limbName) raises (Error);

    /// Get the sample value for a given analysis
    /// \param limbName name of the limb from which to retrieve a sample
    /// \param valueName name of the analytic measure desired
    /// \param sampleId id of the considered sample
    /// \return the value computed for the given sample and analytics
    double getSampleValue(in string limbName, in string valueName, in unsigned short sampleId) raises (Error);

    /// compute the distance between all effectors replaced between two states
    /// does not account for contact not present in both states
    /// \param state1 from state
    /// \param state2 destination state
    /// \return the value computed for the given sample and analytics
    double getEffectorDistance(in unsigned short state1, in unsigned short state2) raises (Error);

    /// Generate all possible contact in a given configuration
    /// \param dofArray initial configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq generateContacts(in floatSeq dofArray, in floatSeq direction, in boolean noStability, in boolean useFlexionPose) raises (Error);

    /// Generate an autocollision free configuration with limbs in contact with the ground
    /// \param contactLimbs name of the limbs to project in contact
    /// \return a sampled contact configuration
    floatSeq generateGroundContact(in Names_t contactLimbs) raises (Error);

    /// Given a configuration and a limb, returns the id of all samples potentially in contact with the
    /// environment, ordered by their efficiency
    /// \param name name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getContactSamplesIds(in string name, in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// get Ids of limb in an octree cell
    /// \param name name of the considered limb
    /// \param octreeNodeId considered configuration of the robot
    /// \return list of ids in the cell
    floatSeq getSamplesIdsInOctreeNode(in string name, in double octreeNodeId) raises (Error);

    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param id user given name of the new limb
    /// \param limb robot joint corresponding to the root of the limb (ex a shoulder or ankle joint)
    /// \param effector robot joint corresponding to the effector of the limb (ex a hand or foot joint)
    /// \param offset contact point of the effector, expressed as an offset from the joint root
    /// \param normal normal vector to consider for contact creation. For instance for a foot, typically
    /// normal is aligned with the -z vertical axis, to create a contact with the plant of the robot
    /// \param x width of the rectangle surface contact of the effector
    /// \param y length of the rectangle surface contact of the effector
    /// \param samples number of samples to generate for the limb (a typical value is 10000)
    /// \param heuristicName heuristic used to bias sample selection
    /// \param resolution resolution of the octree used to store the samples (a typical value is 0.01 meters)
    /// \param contactType whether the contact is punctual ("_3_DOF") or surfacic ("_6_DOF")
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    void addLimb(in string id, in string limb, in string effector, in floatSeq offset, in floatSeq normal,
                 in double x, in double y, in unsigned short samples, in string heuristicName,
                 in double resolution, in string contactType,  in double disableEffectorCollision) raises (Error);

    /// Specifies a subchain of the robot as a limb, which can be used to create contacts.
    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param databasepath filepath to the database
    /// \param id user given name of the new limb
    /// \param heuristicName heuristic used to bias sample selection
    /// \param loadValues whether other values computed for the limb database should be loaded
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    void addLimbDatabase(in string databasepath, in string id, in string heuristicName, in double loadValues,
                         in double disableEffectorCollision) raises (Error);

    /// Set the start state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray start configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setStartState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Compute effector contact points and normals for a given configuration
    /// in local coordinates
    /// \param dofArray configuration of the robot
    /// \param limbName ids of the limb in contact
    floatSeq computeContactForConfig(in floatSeq dofArray, in string limbName) raises (Error);

    /// Set the end state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray end configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setEndState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state, the next one, and the intermediate between them.
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return list of 2 or 3 lists of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPoints(in unsigned short stateId) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state, the next one, and the intermediate between them.
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return list of 2 or 3 lists of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPointsForLimb(in unsigned short stateId, in string limbname) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    /// \param filterStates If different than 0, the resulting state list will be filtered to remove unnecessary states
    floatSeqSeq interpolate(in double timestep, in double path, in double robustnessTreshold, in unsigned short filterStates) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    /// \param filterStates If different than 0, the resulting state list will be filtered to remove unnecessary states
    floatSeqSeq interpolateConfigs(in floatSeqSeq configs, in double robustnessTreshold, in unsigned short filterStates) raises (Error);


    /// returns the CWC of the robot at a given state
    ///
    /// \param stateId The considered state
    /// \param friction The friction coefficient
    /// \return H matrix, such that H w <= h. h is added as the last column
    floatSeqSeq getContactCone(in unsigned short stateId, in double friction) raises (Error);

    /// returns the CWC of the robot between two states
    ///
    /// \param stateId The considered state
    /// \return H matrix, such that H w <= h. h is added as the last column
    floatSeqSeq getContactIntermediateCone(in unsigned short stateId, in double friction) raises (Error);

    /// Create a path for the root given
    /// a set of 3d key points
    /// The path is composed of n+1 linear interpolations
    /// between the n positions.
    /// The rotation is linearly interpolated as well,
    /// between a start and a goal rotation. The resulting path
    /// is added to the problem solver
    /// \param positions array of positions
    /// \param q1 quaternion of 1st rotation
    /// \param q2 quaternion of 2nd rotation
    /// \return id of the root path computed
    short generateRootPath(in floatSeqSeq rootPositions, in floatSeq q1, in floatSeq q2) raises (Error);

    /// Create a com trajectory given list of positions, velocities and accelerations
    /// accelerations list contains one less element because it does not have an initial state.
    /// a set of 3d key points
    /// The path is composed of n+1 integrations
    /// between the n positions.
    /// The resulting path
    /// is added to the problem solver
    /// \param positions array of positions
    /// \param velocities array of velocities
    /// \param accelerations array of accelerations
    /// \param dt time between two points
    /// \return id of the root path computed
    short generateComTraj(in floatSeqSeq positions, in floatSeqSeq velocities, in floatSeqSeq accelerations, in double dt) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states are computed using the current active steering method, and considered to be valid
    /// in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short limbRRT(in double state1, in double state2, in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param path index of the path considered for the generation
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short limbRRTFromRootPath(in double state1, in double state2,  in  unsigned short path, in unsigned short numOptimizations) raises (Error);

		/// Linear interpolation of many configurations into a path
		/// \param configs list of configurations
		/// \return id of the root path computed
		short configToPath(in  floatSeqSeq configs) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param comPath index of the path considered of the com path
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short comRRT(in double state1, in double state2,  in  unsigned short comPath, in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq comRRTFromPos(in double state1,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRT(in double state1,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRTFromPath(in double state1, in  unsigned short refPath,
                                    in double path_from, in double path_to,
                                    in  unsigned short comTraj1,
                                    in  unsigned short comTraj2,
                                    in  unsigned short comTraj3,
                                    in unsigned short numOptimizations,
                                    in Names_t trackedEffectors) raises (Error);

    /// Project a given state into a given COM position
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the state does not exist.
    /// \param state index of first state.
    /// \param targetCom 3D vector for the com position
    /// \return projected configuration
    floatSeq projectToCom(in double state, in floatSeq targetCom) raises (Error);

    /// Retrieve the configuration at a given state
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the state does not exist.
    /// \param state index of first state.
    /// \return projected configuration
    floatSeq getConfigAtState(in unsigned short state) raises (Error);

    /// \param limb name of the limb for which the request aplies
    /// \param state1 current state considered
    /// \return whether the limb is in contact at this state
    short isLimbInContact(in string limbname, in double state1) raises (Error);

    /// Is limb in contact during the motion from the current state to the next one
    /// \param limb name of the limb for which the request aplies
    /// \param state1 current state considered
    /// \return whether the limb is in contact at this state
    short isLimbInContactIntermediary(in string limbname, in double state1) raises (Error);

    /// Saves the last computed states by the function interpolate in a filename.
    /// Raises an error if interpolate has not been called, or the file could not be opened.
    /// \param filename name of the file used to save the contacts.
    void saveComputedStates(in string filename) raises (Error);

    /// Saves a sample database into a file
    /// Raises an ifthe file could not be opened.
    /// \param limbname name of the limb used to save the samples.
    /// \param filename name of the file used to save the samples.
    void saveLimbDatabase(in string limbname, in string filename) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeqSeq getOctreeBoxes(in string limbname, in floatSeq dofArray) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getOctreeBox(in string limbname, in double sampleId) raises (Error);

    /// returns octree transform for a given robot configuration
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return size 7 position + quaternion of the octree root
    floatSeq getOctreeTransform(in string limbname, in floatSeq dofArray) raises (Error);

    /// Shoot and return a configuration with the RBPRM-shooter rbShooter_
    floatSeq rbShoot () raises (Error);

    /// Project given configuration on the nearest obstacle, completing
    /// the 'direction' data of the configuration with the plane normal
    /// \param dist is the shift distance to move the robot away from the
    /// obstacle.
    floatSeq projectOnObstacle (in floatSeq dofArray,
				in double dist) raises (Error);

    /// Return a configuration whose orientation part respect the
    /// given normale and theta (see hpp::rbprm::setOrientation)
    floatSeq setOrientation (in floatSeq dofArray) raises (Error);

    /// Return a quatertion whose orientation part respect the
    /// given normale and theta (see hpp::rbprm::quaternionFromNormalAndTheta)
    floatSeq computeOrientationQuat (in floatSeq normal, in double theta,
				     in string robotName) raises (Error);
	
    /// Set create instance of RBprmShooter from BindShooter_ as a rbShooter_ attribute
    /// This allows to shoot different configurations from the same shooter (and not 
    /// create the shooter each time we shoot)
    void setRbShooter () raises (Error);
	
    /// test if trunk is collision-free and roms are in collision
    void isRbprmValid (in floatSeq dofArray, out boolean trunkValidity,
		       out boolean romValidity, out string report)
      raises (Error);

    /// Add to ProblemSolver list of paths a new path resulting from: a 
    /// parabola path for the robot trunk and an interpolation between start 
    /// and goal states for the limbs
    /// \param pathId: ID path (in Problem Solver path stack) to interpolate
    /// \param u_offset: normalized curvilinear abcissa of contact maintain
    /// \param timed: if true, the parametrization is made with time, and not with x distance
    void interpolateBallisticPath (in unsigned short pathId,
				   in double u_offset,
				   in boolean timed) raises (Error);

    /// Generate contact on the waypoint-configurations of the given path
    floatSeqSeq generateWaypointContacts (in unsigned short pathId)
      raises (Error);

    /// fill a trunk-sized configuration into a fullbody-sized one
    floatSeq fillConfiguration (in floatSeq dofArray,
				in unsigned short fullSize) raises (Error);

    /// Set the number of filters that must match for RoM validation
    void setNumberFilterMatch (in unsigned short nbFilterMatch) raises (Error);

    /// Get the initial or impact/final velocity directions computed by the 
    /// steering method for each subpath.
    /// \param Vquery is set to "V0" for initial velocities or "Vimp" for 
    /// impact/final velocities
    floatSeqSeq getsubPathsV0Vimp (in string Vquery, in unsigned short pathId)
      raises (Error);

    /// Add new path vector to Problem Solver, where robot orientation was
    /// updated to "follow" the given path directions
    /// \param pathId: reference path to apply rotation
    /// \param rotateAfterJump : if true, orientation at waypoint i is along path (i-1) -> i
    /// \param fullbody: True if applied on a fullbody robot (returns path 
    /// \param getCloseToContact : follow the opposite of the contact normal until the configuration is 
    ///                            as close as possible of the contact
    /// vector of ballistic-paths), False if applied on a rbprm robot 
    /// (returns path vector of parabola-paths)
    void rotateAlongPath (in unsigned short pathId, in boolean rotateAfterJump,
			  in boolean trunkOrientation,
			  in boolean getCloseToContact) raises (Error);

    /// Set fullOrientationMode of rbprm-shooter
    /// \param fullOrientationMode: True if robot fully oriented according to obstacle surface normal, False if robot randomly oriented
    void setFullOrientationMode (in boolean fullOrientationMode);

    void setContactSize (in double xValue, in double yValue);

    /// set the extending or the flexion pose of the fullbody
    /// \param dofArray configuration of the pose
    /// \param string query: 'extending' or 'flexion'
    void setPose (in floatSeq dofArray, in string poseQuery) raises (Error);

    /// Set maximal takeoff velocity for parabola-steering-method
    void setMaxTakeoffVelocity (in double vmax) raises (Error);

    /// Set maximal landing velocity for parabola-steering-method
    void setMaxLandingVelocity (in double vmax) raises (Error);

    /// Set tangent friction coefficient for cones in parabola-steering-method
    void setFrictionCoef (in double mu) raises (Error);

    /// Get vector of parabola result values from parabola-steering-method
    intSeq getResultValues () raises (Error);


    /// returns octree transform for a given robot configuration
    /// \param config configuration tested on the robot
    /// \param contacts name of the limbs in contact
    /// \param robustnessTreshold robustness treshold used
    /// \return whether the configuration is quasi-statically balanced
    short isConfigBalanced(in floatSeq config, in Names_t contacts,  in double robustnessTreshold) raises (Error);

    /// run and store an analysis on all limb databases
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    void runSampleAnalysis(in string analysis, in double isstatic) raises (Error);

    /// run and store an analysis on a limb database
    /// \param limbname name of the limb to perform the analysis to
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    /// \return min and max values obtained
    floatSeq runLimbSampleAnalysis(in string limbname, in string analysis, in double isstatic) raises (Error);
    
    /// set the reference pose of "ReferencePose" heuristic
    /// \param dofArray configuration of the pose
   // void setReferenceConfig (in floatSeq dofArray) raises (Error);
    
    /// add a "ReferencePose" heuristic to the factory
    /// dofArray : reference configuration of the limb
    /// name of the heuristic
    void addRefConfigAnalysis (in floatSeq dofArray,in string name) raises (hpp::Error);

    void addRefConfigAnalysisWeight (in floatSeq dofArray,in string name, in floatSeq weightArray) raises (hpp::Error);

    void setFullbodyFrictionCoef (in double mu);

    /// Compute the intersection between the convex sum of the given cones 
    /// with the vertical plane of x-y-orientation theta.
    /// If force-closure is detected, result is adapted.
    /// 2D-convex-cone result is presented as a vector:
    /// [half-apex-angle, x_dir, y_dir, z_dir]
    floatSeq convexConePlaneIntersection (in unsigned short Ncones,
					  in floatSeqSeq cones,
					  in double theta, in double mu)
      raises (Error);

    /// Get contact-cones directions and positions
    /// corresponding to given rbprm-configuration.
    /// Contact-cones should be located at the center of the
    /// ROM-obstacle intersections.
    floatSeqSeq getContactCones (in floatSeq dofArray,
				 out floatSeqSeq conePositions) raises (Error);

    /// Get configurations contained in lastStatesComputedTime_ and their times
    floatSeqSeq getlastStatesComputedTime ();

    /// if the preprocessor variable PROFILE is active
    /// dump the profiling data into a logFile
    /// \param logFile name of the file where to dump the profiling data
    void dumpProfile(in string logFile) raises (Error);

    /// Depending on string query, fill attributes:
    /// - thetaBefore_ and Vimp_ or
    /// - thetaAfter_ and V0_
    /// of fullbody for convex-cone validation of contact.
    /// If clean is true, set to NULL the attributes (no validation).
    void setFullbodyV0fThetaCoefs (in string Vquery, in boolean clean,
				   in floatSeq Varray,
				   in double theta) raises (Error);

    /// Set if state computed by "generateContacts" is saved and used when
    /// setStartState and setEndState are called
    void setFillGenerateContactState (in boolean b);

    /// Set interior point of mesh to biais the random-shooter triangle
    /// normals toward it. This is introduced because the AFFORDANCE lost 
    /// the notion of interior defined in the .stl or .dae files 
    /// (points of triangle correctly ordered)
    void setInteriorPoint (in floatSeq point) raises (Error);

  }; // interface Robot
  }; // module rbprm
  }; // module corbaserver
}; // module hpp

#endif // HPP_RBPRM_CORBA_BUILDER_IDL
