// Copyright (c) 2015 CNRS
// Author: Steve Tonneau
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_RBPRM_CORBA_BUILDER_IDL
# define HPP_RBPRM_CORBA_BUILDER_IDL

# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  module rbprm {
  interface RbprmBuilder
  {
    /// Create a Device for the ROM of the robot
    /// This function can be called several times to include several ROMs (one for each limb)
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param romRobotName the name of the robot range of motion.
    ///  Load robot model
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotRomModel (in string romRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);


    /// Create a RbprmDevice for the root of the robot

    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotCompleteModel (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Create a RbprmFullBody object
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadFullBodyRobot (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Set Rom constraints for the configuration shooter
    /// a configuration will only be valid if all roms indicated
    /// are colliding with the environment.
    /// If no roms are indicated, a configuration will be valid if any rom
    /// is colliding with the environment.
    ///
    void setFilter (in Names_t roms)
      raises (Error);

    /// Set Rom surface constraints for the configuration shooter
    /// a Rom configuration will only be valid it collides with a surface
    /// the normal of which is colinear to the indicated normal,
    /// modulated by a range value.
    /// \param normal prefered contact surface normal direction
    /// \param range tolerance between surface normal and desired surface normal. If the dot
    /// product of the normal is greater than range then the surface will be accepted.
    ///
    void setNormalFilter(in string romName, in floatSeq normal, in double range) raises (Error);

    /// Sets limits on robot orientation, described according to Euler's ZYX rotation order
    ///
    /// \param limitszyx 6D vector with the lower and upperBound for each rotation axis in sequence
    /// expressed in gradients
    /// [z_inf, z_sup, y_inf, y_sup, x_inf, x_sup]
    void boundSO3(in floatSeq limitszyx) raises (Error);

    /// Get Sample configuration by its id
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return dofArray Array of degrees of freedom corresponding to the current configuration of the robot
    /// , to which the desired limb configuration has been assigned.
    floatSeq getSampleConfig(in string sampleName, in unsigned short sampleId) raises (Error);


    /// Get the end effector position of a given limb configuration
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return world position of the limb end effector given the current robot configuration and the
    /// and the selected sample
    floatSeq getSamplePosition(in string sampleName, in unsigned short sampleId) raises (Error);

    /// Generate all possible contact in a given configuration
    /// \param dofArray initial configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq generateContacts(in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// Given a configuration and a limb, returns the id of all samples potentially in contact with the
    /// environment, ordered by their efficiency
    /// \param name name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getContactSamplesIds(in string name, in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// Specifies a subchain of the robot as a limb, which can be used to create contacts.
    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param id user given name of the new limb
    /// \param limb robot joint corresponding to the root of the limb (ex a shoulder or ankle joint)
    /// \param effector robot joint corresponding to the effector of the limb (ex a hand or foot joint)
    /// \param offset contact point of the effector, expressed as an offset from the joint root
    /// \param normal normal vector to consider for contact creation. For instance for a foot, typically
    /// normal is aligned with the -z vertical axis, to create a contact with the plant of the robot
    /// \param x width of the rectangle surface contact of the effector
    /// \param y length of the rectangle surface contact of the effector
    /// \param samples number of samples to generate for the limb (a typical value is 10000)
    /// \param heuristicName heuristic used to bias sample selection
    /// \param resolution resolution of the octree used to store the samples (a typical value is 0.01 meters)
    /// \param contactType whether the contact is punctual ("_3_DOF") or surfacic ("_6_DOF")
    void addLimb(in string id, in string limb, in string effector, in floatSeq offset, in floatSeq normal,
                 in double x, in double y, in unsigned short samples, in string heuristicName,
                 in double resolution, in string contactType) raises (Error);

    /// Set the start state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray start configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setStartState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);


    /// Set the end state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray end configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setEndState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    floatSeqSeq interpolate(in double timestep, in double path, in double robustnessTreshold) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    floatSeqSeq interpolateConfigs(in floatSeqSeq configs, in double robustnessTreshold) raises (Error);

    /// Saves the last computed states by the function interpolate in a filename.
    /// Raises an error if interpolate has not been called, or the file could not be opened.
    /// \param filename name of the file used to save the contacts.
    void saveComputedStates(in string filename) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeqSeq GetOctreeBoxes(in string limbname, in floatSeq dofArray) raises (Error);


    /// returns octree transform for a given robot configuration
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return size 7 position + quaternion of the octree root
    floatSeq getOctreeTransform(in string limbname, in floatSeq dofArray) raises (Error);

    /// Shoot and return a configuration with RBPRM-shooter
    floatSeq rbShoot () raises (Error);

    /// Project given configuration on the nearest obstacle, completing
    /// the 'direction' data of the configuration with the plane normal
    /// \param dist is the shift distance to move the robot away from the
    /// obstacle.
    floatSeq projectOnObstacle (in floatSeq dofArray,
				in double dist) raises (Error);

    /// Return a configuration whose orientation part respect the
    /// given normale and theta (see hpp::core::setOrientation)
    floatSeq setOrientation (in floatSeq dofArray) raises (Error);

  }; // interface Robot
  }; // module rbprm
  }; // module corbaserver
}; // module hpp

#endif // HPP_RBPRM_CORBA_BUILDER_IDL
